* cc - a project c compiler

The goal of this project is to produce a C compiler covering most of the C99 language.
Some parts of the C99 spec may be omitted, but the compiler is written in pure C99 and should be able to compile itself.

** Compiler Phases

*** Lexing
   - Contained in the files lex.h, and lex.c
   - I opted not to use lex, or another lexer generator
   - The C standard specifies tokens exactly, so I used that as my primary resource
   - Usages of finite automata are only needed on paper, the lexer contains only switch statements and loops
   - Carrying position information is important to error handling later
   - Further detail in [[*Lexical Analysis]]
   
** Data Structures

** Syntax Analysis

There are many techniques and algorithms for syntax analysis.
This project has been designed to have each component written by hand, without the use of
lexer or parser generators.  Some techniques take kindly to hand writing better, and I have
chosen to use top down, recursive descent parsing.  I will build an abstract syntax tree without
any semantic information through this process, represented with simple C unions and enums.

*** Syntax of C

For conciseness sake, this does not account for precedence. Consult a table for that info.
expr = binop

binop_op = + | - | * | / | %

binop = expr binop_op expr

primary_expr = num | id | str | ( expr )

** Lexical Analysis

*** Lexical Syntax of C

There are 37 keywords in the C99 spec, which are:

auto, break, case, char, const, continue, default, do, double, else, enum, extern,
float, for, goto, if, infline, int, long, register, restrict, return, short, signed,
sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while,
_Bool, _Complex, _Imaginary

Tokens in C99 are "reserved" meaning that no identifier can use these tokens as names.
Because of this, each keyword is given its own token.

There are also several elements of punctuation which are:

[ ] ( ) { } . -> ++ -- & * + - ~ ! / % << >> < > <= >= == != ^ | && || ? : ; ...
= *= /= %= += -= <<= >>= &= ^= |= , # ##

Each of these punctuation marks are also given a token type.

C99 only requires that implementations allow identifiers to be made of latin-1 characters, so Unicode identifiers don't need to be accepted.

ident ::= [a-zA-Z_][a-zA-Z0-_]*

int ::= intval intsuffix?
intval ::= decint | hexint | octalint

decint ::= (1-9)(0-9)*
hexint ::= (0x|0X)[0-9a-fA-F)+
octalint ::= 0[0-7]*

intsuffix ::= unsignedsuf (longsuf | longlongsuf)? | (longsuf | longlongsuf) unsignedsuf?

unsignedsuf ::= (u|U)
longsuf ::= (l|L)
longlongsuf ::= (ll|LL)

None of these contain a negative sign, because the parser will be in charge of deciding if a negative sign belongs with an integer or as subtraction.

* TODO
  - Check for overflow in integer tokenization

September 23rd, 2021

Today I implemented binary operations in the abstract syntax tree. I defined them with
a nother member of the union.  THen I implemeneted parsing for the binary ops, complete with operator precedence.

September 28th, 2021

I continued the implementation of expression parsing.  Almost all C99 expression types can be parsed.

October 5th, 2021.

I have been out for the weekend and I missed Friday. I am continuing parsing by working on statements.
C has extremely weird and detailed rules about statements and declarations, and I have to start dealing with
non-context free concepts such as symbol tables and typing.  The compiler still lacks a few important concepts,
primarily constant expressions and declarations, but these are getting filled in.  As of the end of today, we
can now parse return statements, expression statements, if and else if statements and statements containing no
content.  There are still for, while, and do loops, switch statements and of course cases, defaults, and labels.
Baby steps.

